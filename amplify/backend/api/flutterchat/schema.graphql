type Todo @model {
  id: ID!
  name: String!
  description: String
}
# here we create Schema for graphQL
type Message
@model
@auth(rules:[{allow:private,operations:[read, create]}])
{
id:ID!
userId:String!
username:String!
message:String!
room_id: String!
type:String! @index(name:"messagesByDate",queryField:"messagesByDate",sortKeyFields:["createdAt"])
createdAt:String!
}

type Room
@model
@auth(rules:[{allow:private,operations:[read, create]}])
{
id:ID!
room_name:String!
}

#type Room_User
#@model
#@auth(rules:[{allow:private,operations:[read, create]}])
#{
#id:ID!
#room_id:String!
#user_id: String!
#}

type Chatdata @model @auth(rules: [{allow: public}]) {
  id: ID!
  message: String
  createdAt: AWSTimestamp
  updatedAt: AWSTimestamp
  chatId: String
  senderId: String
}

type Users @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String
  email: AWSEmail
  bio: String
  profileImage: AWSURL
  isVerified: Boolean
  createdAt: AWSTimestamp
  chats: [AWSJSON]
}